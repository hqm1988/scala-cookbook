package classesAndProperties

object BoilerplatingWithCaseClasses {
  def main(args: Array[String]): Unit = {
    val j = Jambo("ElPavoEse","Desconocido")

    j.name="AaaahAhoraSiQueMeSuenas"

    val j2 = Jambo("Tipo1","Tipo")
    val j3 = Jambo("Tipo2","Tipo")
    val j4 = Jambo("Jorge Avila","Señor mayor")

    val s :Seq[Jambo] = Seq(j,j2,j3,j4)

    println(
      s.map {
        case Jambo(_, "Tipo") => s"un tipo"
        case Jambo(_,"Señor mayor") => s"Toca cuidarse"
        case _ => s"que me estas dando ya"
      }.mkString(",")
    )

  }

}

case class Jambo(var name:String,relation:String)

/*
@NOTE: A case class has some code and methods autogenerated:
- An apply method is generated, so you don’t need to use the new keyword
to create a new instance of the class.

- Accessor methods are generated for the constructor parameters because
case class constructor parameters are val by default. Mutator methods
are also generated for parameters declared as var.

- A good, default toString method is generated.

- An unapply method is generated, making it easy to use case classes
in match expressions.

- Equals and hashCode methods are generated.

- A copy method is generated.

 */